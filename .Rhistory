shiny::runApp()
# Carregar o pacote tidymodels
library(tidymodels)
install.packages("tidymodels")
# Carregar o pacote tidymodels
library(tidymodels)
# Carregar o modelo treinado
modelo_treinado <- readRDS("modelo_treinado.rds")
# Carregar o modelo treinado
modelo_treinado <- readRDS("modelo_covid.rds")
# Criar um conjunto de dados para previsão
dados_predicao <- data.frame(idade = c(30, 40, 50))
View(dados_predicao)
# Fazer a previsão usando o modelo
previsao <- predict(modelo_treinado, new_data = dados_predicao)
install.packages("ranger")
# Fazer a previsão usando o modelo
previsao <- predict(modelo_treinado, new_data = dados_predicao)
View(previsao)
# Imprimir os resultados da previsão
print(previsao)
shiny::runApp()
shiny::runApp()
library(shiny)
# Carregar o modelo treinado
modelo_treinado <- readRDS("modelo_covid.rds")
# Definir a interface do aplicativo
ui <- fluidPage(
titlePanel("Predição da Evolução de Pacientes com Covid-19"),
sidebarLayout(
sidebarPanel(
# Inserir campos de entrada para atributos do paciente aqui
numericInput("idade", "Idade:", value = 30)
# Adicione outros campos de entrada conforme necessário
),
mainPanel(
# Exibir resultados da previsão aqui
textOutput("resultado")
)
)
)
# Definir a lógica do aplicativo
server <- function(input, output) {
# Função para realizar a previsão
realizarPredicao <- function(idade) {
# Criar um data frame com os dados de entrada
dados_predicao <- data.frame(idade = idade)
# Fazer a previsão com o modelo
previsao <- predict(modelo_treinado, dados_predicao)
return(previsao)
}
# Atualizar o resultado da previsão
output$resultado <- renderText({
idade <- input$idade
previsao <- realizarPredicao(idade)
return(paste("Evolução Prevista:", previsao))
})
}
# Rodar o aplicativo Shiny
shinyApp(ui, server)
shiny::runApp()
shiny::runApp()
# Carregar o modelo treinado
modelo_treinado <- readRDS("modelo_covid.rds")
# Definir a interface do aplicativo
ui <- fluidPage(
titlePanel("Predição da Evolução de Pacientes com Covid-19"),
sidebarLayout(
sidebarPanel(
# Inserir campos de entrada para atributos do paciente aqui
numericInput("idade", "Idade:", value = 90)
# Adicione outros campos de entrada conforme necessário
),
mainPanel(
# Exibir resultados da previsão aqui
textOutput("resultado")
)
)
)
# Definir a lógica do aplicativo
server <- function(input, output) {
# Função para realizar a previsão
realizarPredicao <- function(idade) {
# Criar um data frame com os dados de entrada
dados_predicao <- data.frame(idade = idade)
# Fazer a previsão com o modelo
previsao <- predict(modelo_treinado, dados_predicao)
return(previsao)
}
# Atualizar o resultado da previsão
output$resultado <- renderText({
idade <- input$idade
previsao <- realizarPredicao(idade)
return(paste("Evolução Prevista:", previsao))
})
}
# Rodar o aplicativo Shiny
shinyApp(ui, server)
# Carregar o modelo treinado
modelo_treinado <- readRDS("modelo_covid.rds")
# Definir a interface do aplicativo
ui <- fluidPage(
titlePanel("Predição da Evolução de Pacientes com Covid-19"),
sidebarLayout(
sidebarPanel(
# Inserir campos de entrada para atributos do paciente aqui
numericInput("idade", "Idade:", value = 90)
# Adicione outros campos de entrada conforme necessário
),
mainPanel(
# Exibir resultados da previsão aqui
textOutput("resultado")
)
)
)
# Definir a lógica do aplicativo
server <- function(input, output) {
# Função para realizar a previsão
realizarPredicao <- function(idade) {
# Criar um data frame com os dados de entrada
dados_predicao <- data.frame(idade = idade)
# Fazer a previsão com o modelo
previsao <- predict(modelo_treinado, dados_predicao)
return(previsao)
}
# Atualizar o resultado da previsão
output$resultado <- renderText({
idade <- input$idade
previsao <- realizarPredicao(idade)
print(previsao)
return(paste("Evolução Prevista:", previsao))
})
}
# Rodar o aplicativo Shiny
shinyApp(ui, server)
previsao
View(previsao)
library(shiny)
# Carregar o modelo treinado
modelo_treinado <- readRDS("modelo_covid.rds")
# Definir a interface do aplicativo
ui <- fluidPage(
titlePanel("Predição da Evolução de Pacientes com Covid-19"),
sidebarLayout(
sidebarPanel(
# Inserir campos de entrada para atributos do paciente aqui
numericInput("idade", "Idade:", value = 90)
# Adicione outros campos de entrada conforme necessário
),
mainPanel(
# Exibir resultados da previsão aqui
textOutput("resultado")
)
)
)
# Definir a lógica do aplicativo
server <- function(input, output) {
# Função para realizar a previsão
realizarPredicao <- function(idade) {
# Criar um data frame com os dados de entrada
dados_predicao <- data.frame(idade = idade)
# Fazer a previsão com o modelo
previsao <- predict(modelo_treinado, dados_predicao)
return(previsao)
}
# Atualizar o resultado da previsão
output$resultado <- renderText({
idade <- input$idade
previsao <- realizarPredicao(idade)
print(previsao..pred_class)
return(paste("Evolução Prevista:", previsao))
})
}
# Rodar o aplicativo Shiny
shinyApp(ui, server)
library(shiny)
# Carregar o modelo treinado
modelo_treinado <- readRDS("modelo_covid.rds")
# Definir a interface do aplicativo
ui <- fluidPage(
titlePanel("Predição da Evolução de Pacientes com Covid-19"),
sidebarLayout(
sidebarPanel(
# Inserir campos de entrada para atributos do paciente aqui
numericInput("idade", "Idade:", value = 90)
# Adicione outros campos de entrada conforme necessário
),
mainPanel(
# Exibir resultados da previsão aqui
textOutput("resultado")
)
)
)
# Definir a lógica do aplicativo
server <- function(input, output) {
# Função para realizar a previsão
realizarPredicao <- function(idade) {
# Criar um data frame com os dados de entrada
dados_predicao <- data.frame(idade = idade)
# Fazer a previsão com o modelo
previsao <- predict(modelo_treinado, dados_predicao)
return(previsao)
}
# Atualizar o resultado da previsão
output$resultado <- renderText({
idade <- input$idade
previsao <- realizarPredicao(idade)
print(previsao.pred_class)
return(paste("Evolução Prevista:", previsao))
})
}
# Rodar o aplicativo Shiny
shinyApp(ui, server)
# Carregar o modelo treinado
modelo_treinado <- readRDS("modelo_covid.rds")
# Definir a interface do aplicativo
ui <- fluidPage(
titlePanel("Predição da Evolução de Pacientes com Covid-19"),
sidebarLayout(
sidebarPanel(
# Inserir campos de entrada para atributos do paciente aqui
numericInput("idade", "Idade:", value = 90)
# Adicione outros campos de entrada conforme necessário
),
mainPanel(
# Exibir resultados da previsão aqui
textOutput("resultado")
)
)
)
# Definir a lógica do aplicativo
server <- function(input, output) {
# Função para realizar a previsão
realizarPredicao <- function(idade) {
# Criar um data frame com os dados de entrada
dados_predicao <- data.frame(idade = idade)
# Fazer a previsão com o modelo
previsao <- predict(modelo_treinado, dados_predicao)
return(previsao)
}
# Atualizar o resultado da previsão
output$resultado <- renderText({
idade <- input$idade
previsao <- realizarPredicao(idade)
print(previsao)
return(paste("Evolução Prevista:", previsao))
})
}
# Rodar o aplicativo Shiny
shinyApp(ui, server)
# Carregar o modelo treinado
modelo_treinado <- readRDS("modelo_covid.rds")
# Definir a interface do aplicativo
ui <- fluidPage(
titlePanel("Predição da Evolução de Pacientes com Covid-19"),
sidebarLayout(
sidebarPanel(
# Inserir campos de entrada para atributos do paciente aqui
numericInput("idade", "Idade:", value = 90)
# Adicione outros campos de entrada conforme necessário
),
mainPanel(
# Exibir resultados da previsão aqui
textOutput("resultado")
)
)
)
# Definir a lógica do aplicativo
server <- function(input, output) {
# Função para realizar a previsão
realizarPredicao <- function(idade) {
# Criar um data frame com os dados de entrada
dados_predicao <- data.frame(idade = idade)
# Fazer a previsão com o modelo
previsao <- predict(modelo_treinado, dados_predicao)
return(previsao)
}
# Atualizar o resultado da previsão
output$resultado <- renderText({
idade <- input$idade
previsao <- realizarPredicao(idade)
print(previsao)
return(previsao)
})
}
# Rodar o aplicativo Shiny
shinyApp(ui, server)
# Carregar o modelo treinado
modelo_treinado <- readRDS("modelo_covid.rds")
# Definir a interface do aplicativo
ui <- fluidPage(
titlePanel("Predição da Evolução de Pacientes com Covid-19"),
sidebarLayout(
sidebarPanel(
# Inserir campos de entrada para atributos do paciente aqui
numericInput("idade", "Idade:", value = 90)
# Adicione outros campos de entrada conforme necessário
),
mainPanel(
# Exibir resultados da previsão aqui
textOutput("resultado")
)
)
)
# Definir a lógica do aplicativo
server <- function(input, output) {
# Função para realizar a previsão
realizarPredicao <- function(idade) {
# Criar um data frame com os dados de entrada
dados_predicao <- data.frame(idade = idade)
# Fazer a previsão com o modelo
previsao <- predict(modelo_treinado, dados_predicao)
return(previsao)
}
# Atualizar o resultado da previsão
output$resultado <- renderText({
idade <- input$idade
previsao <- realizarPredicao(idade)
print(previsao)
resultado_previsao <- list("Evolução Prevista:")
for (i in seq_along(previsao)) {
resultado_previsao <- append(resultado_previsao, paste("Idade", dados_predicao$idade[i], ":", as.character(previsao[i])))
}
return(resultado_previsao)
})
}
# Rodar o aplicativo Shiny
shinyApp(ui, server)
# Carregar o modelo treinado
modelo_treinado <- readRDS("modelo_covid.rds")
# Definir a interface do aplicativo
ui <- fluidPage(
titlePanel("Predição da Evolução de Pacientes com Covid-19"),
sidebarLayout(
sidebarPanel(
# Inserir campos de entrada para atributos do paciente aqui
numericInput("idade", "Idade:", value = 90)
# Adicione outros campos de entrada conforme necessário
),
mainPanel(
# Exibir resultados da previsão aqui
textOutput("resultado")
)
)
)
# Definir a lógica do aplicativo
server <- function(input, output) {
# Função para realizar a previsão
realizarPredicao <- function(idade) {
# Criar um data frame com os dados de entrada
dados_predicao <- data.frame(idade = idade)
# Fazer a previsão com o modelo
previsao <- predict(modelo_treinado, dados_predicao)
return(previsao)
}
# Atualizar o resultado da previsão
output$resultado <- renderText({
idade <- input$idade
previsao <- realizarPredicao(idade)
print(previsao[1])
return(previsao[1])
})
}
# Rodar o aplicativo Shiny
shinyApp(ui, server)
# Carregar o modelo treinado
modelo_treinado <- readRDS("modelo_covid.rds")
# Definir a interface do aplicativo
ui <- fluidPage(
titlePanel("Predição da Evolução de Pacientes com Covid-19"),
sidebarLayout(
sidebarPanel(
# Inserir campos de entrada para atributos do paciente aqui
numericInput("idade", "Idade:", value = 90)
# Adicione outros campos de entrada conforme necessário
),
mainPanel(
# Exibir resultados da previsão aqui
textOutput("resultado")
)
)
)
# Definir a lógica do aplicativo
server <- function(input, output) {
# Função para realizar a previsão
realizarPredicao <- function(idade) {
# Criar um data frame com os dados de entrada
dados_predicao <- data.frame(idade = idade)
# Fazer a previsão com o modelo
previsao <- predict(modelo_treinado, dados_predicao)
return(previsao)
}
# Atualizar o resultado da previsão
output$resultado <- renderText({
idade <- input$idade
previsao <- realizarPredicao(idade)
print(previsao$.pred_class[1])
return(paste("Evolução Prevista:", previsao))
})
}
# Rodar o aplicativo Shiny
shinyApp(ui, server)
# Carregar o modelo treinado
modelo_treinado <- readRDS("modelo_covid.rds")
# Definir a interface do aplicativo
ui <- fluidPage(
titlePanel("Predição da Evolução de Pacientes com Covid-19"),
sidebarLayout(
sidebarPanel(
# Inserir campos de entrada para atributos do paciente aqui
numericInput("idade", "Idade:", value = 90)
# Adicione outros campos de entrada conforme necessário
),
mainPanel(
# Exibir resultados da previsão aqui
textOutput("resultado")
)
)
)
# Definir a lógica do aplicativo
server <- function(input, output) {
# Função para realizar a previsão
realizarPredicao <- function(idade) {
# Criar um data frame com os dados de entrada
dados_predicao <- data.frame(idade = idade)
# Fazer a previsão com o modelo
previsao <- predict(modelo_treinado, dados_predicao)
return(previsao)
}
# Atualizar o resultado da previsão
output$resultado <- renderText({
idade <- input$idade
previsao <- realizarPredicao(idade)
print(previsao$.pred_class[1])
return(paste("Evolução Prevista:", previsao$.pred_class[1]))
})
}
# Rodar o aplicativo Shiny
shinyApp(ui, server)
